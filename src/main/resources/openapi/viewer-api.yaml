#
# Copyright (C) 2021 B3Partners B.V.
#
# SPDX-License-Identifier: MIT
#
openapi: 3.0.3

info:
  title: 'Tailormap API'
  description: '
  Tailormap API contains the calls necessary to get the configuration for a map viewer and calls
  to get features.
  
  Note: you need to send an X-XSRF-TOKEN header with the value from the XSRF-TOKEN
  cookie for non-GET requests. The Angular HttpClient does this automatically.
  '
  contact:
    name: 'B3Partners BV'
    url: 'https://www.b3partners.nl/'
    email: 'info@b3partners.nl'
  license:
    name: 'MIT'
    url: 'https://mit-license.org/'
  version: 'v1'
servers:
  - url: '{basePath}'
    variables:
      basePath:
        description: base path
        default: '/api'

components:
  securitySchemes:
    formAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID

  schemas:
    UnauthorizedResponse:
      description: 'Returned when calling an API for which you are required to be authorized (logged in).'
      type: object
      properties:
        unauthorized:
          type: boolean

    LoginConfiguration:
      type: object
      properties:
        hideLoginForm:
          description: 'If set, should hide the login form for any user-facing applications.'
          type: boolean
        ssoLinks:
          description: 'Lists alternative SSO links.'
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              url:
                type: string
              showForViewer:
                type: boolean

    UserResponse:
      description: 'Information about authentication status and user information'
      type: object
      properties:
        isAuthenticated:
          type: boolean
          description: 'true if the user is authenticated'
        username:
          type: string
          description: 'username of the authenticated user'
        roles:
          type: array
          uniqueItems: true
          items:
            type: string
        properties:
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/AdditionalProperty'
        groupProperties:
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/AdditionalProperty'


    ConfigResponse:
      description: 'Global configuration value'
      type: object
      properties:
        key:
          type: string
        value:
          type: string
          nullable: true
          description: 'Scalar string value'
        object:
          type: object
          nullable: true
          description: 'Free-form value'

    MapResponse:
      description: 'Any information needed to draw a basic map on a page. May include base layers.'
      type: object
      properties: # mostly properties from table "application"
        initialExtent:
          description: 'initial bounds for the map'
          $ref: './common-schemas.yaml#/components/schemas/Bounds'
          nullable: true
        maxExtent:
          description: 'maximum bounds for the map'
          $ref: './common-schemas.yaml#/components/schemas/Bounds'
          nullable: true
        services: # TODO in the current implementation this is an object with the id of a service as elemnt
          #      eg. "1": {"protocol": "tiled", "matrixSets":[], "id": 1
          #      an array seems the better option
          # TODO Not sure we actually/still need this...
          type: array
          uniqueItems: true
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/Service'
        baseLayerTreeNodes:
          description: 'Unordered list of all tree nodes of base layers. Start with the node with root set to true and 
            use the ordered children array property to order the tree. For base layers, only one child node (with all
            its'' child layers) of the root should be displayed at one time.'
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/LayerTreeNode'
        layerTreeNodes:
          description: 'Unordered list of all tree nodes of overlay/thematic/transparent layers. Start with the node 
            with root set to true and use the ordered children array property to order the tree.'
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/LayerTreeNode'
        terrainLayerTreeNodes:
          description: 'Unordered list of all tree nodes of terrain layers. Start with the node 
            with root set to true and use the ordered children array property to order the tree.'
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/LayerTreeNode'
        appLayers:
          description: 'Unordered list of all AppLayers referenced from baseLayerTreeNodes and layerTreeNodes. Note that
            you need to lookup these by id, but OpenAPI only supports a map by using strings as keys, so an array is 
            used instead.'
          type: array
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/AppLayer'
        crs:
          $ref: './viewer-schemas.yaml#/components/schemas/TMCoordinateReferenceSystem'
      required:
        - initialExtent
        - services
        - baseLayerTreeNodes
        - layerTreeNodes
        - appLayers
        - crs

    Layers:
      description: 'An array of app layers.'
      type: array
      minItems: 0
      items:
        $ref: './viewer-schemas.yaml#/components/schemas/AppLayer'

    ViewerResponse:
      type: object
      description: 'Basic viewer information'
      required: [kind, name, title, baseViewers, languages, projections, styling, components]
      properties:
        kind:
          description: Kind of viewer; a 'service' viewer has layers from a single service combined
            with a base viewer. A 'viewer' has content configured from various services.
          type: string
          nullable: false
          enum:
            - service
            - app
        name:
          type: string
          nullable: false
        title:
          type: string
          nullable: false
        baseApps:
          description: Available base apps. The first item is the default. May have one entry
            if only one is available. An empty list means there are no base apps available.
          type: array
          items:
            type: string
          nullable: false
        i18nSettings:
          $ref: './common-schemas.yaml#/components/schemas/AppI18nSettings'
        uiSettings:
          $ref: './common-schemas.yaml#/components/schemas/AppUiSettings'
        projections:
          description: Available projections for this application. The first item is the default.
            Not all layers may be available in all projections.
          type: array
          items:
            type: string
          nullable: false
        styling:
          $ref: './viewer-schemas.yaml#/components/schemas/AppStyling'
        components:
          description: 'Configured components (controls) for the viewer'
          type: array
          minItems: 0
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/Component'
          nullable: false

    FeaturesResponse:
      description: 'A -possibly empty- list of features with requested attributes and presentation metadata'
      type: object
      required: [ features,
                  columnMetadata ]
      properties:
        total:
          description: '
            the total number of available features, can be an estimated value. 
            Can be missing when unknown or irrelevant (eg. featureinfo request)
          '
          type: integer
          nullable: true
        page:
          description: 'current page, this will allow the client to request the next or previous page by adding or removing 1 or more'
          type: integer
          nullable: true
          minimum: 1
        pageSize:
          description: 'number of features in a page, this will allow calculating the offset (page * pagesize)'
          type: integer
          nullable: true
          readOnly: true
          default: 100
          minimum: 1
        features:
          description: 'list of features. When the pagenumber*pagesize exceeds the number of features this list will be empty'
          type: array
          minItems: 0
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/Feature'
        columnMetadata:
          description: 'presentation metadata'
          type: array
          minItems: 0
          items:
            $ref: './viewer-schemas.yaml#/components/schemas/ColumnMetadata'
        template:
          description: Template/description for a feature. Will replace placeholders by attribute values in the viewer
          type: string
          nullable: true
      example:
        total: 400
        page: 5
        pageSize: 100
        features: [ ]
        columnMetadata: [ ]

    UniqueValuesResponse:
      description: 'A -possibly empty- list of unique values of the requested attributes.'
      type: object
      required: [ values ]
      properties:
        filterApplied:
          description: 'true if the filter was applied, false otherwise'
          type: boolean
          default: false
        values:
          description: 'list of unique values'
          type: array
          minItems: 0
          uniqueItems: true
          # any one type of string|number|boolean is allowed, but that generates unusable java code
          # so allow any non-null value, we don't need to worry about mixed types as the data comes from a
          # typed datasource (database table or WFS)
          items: { }
      example:
        filterApplied: false
        values: [ "value 1", "value 2" ]

    SearchResponse:
      description: 'A -possibly empty- list of search documents that fulfill the requested conditions and some metadata.'
      type: object
      properties:
        start:
          description: 'requested start point, this will allow the client to request the next or previous page by adding or removing 1 or more. See also https://solr.apache.org/guide/solr/latest/query-guide/common-query-parameters.html#start-parameter'
          type: integer
          format: int64
          nullable: true
          minimum: 0
        total:
          description: 'the total number of available search documents, could be an estimated value.'
          type: integer
          format: int64
          nullable: false
        maxScore:
          description: 'the maximum score of the search documents. Commonly `null` for wildcard searches as these are filters and don''t score.'
          type: number
          format: float
          nullable: true
        documents:
          description: 'list of search documents. When the pagenumber*pagesize exceeds the number of documents this list will be empty'
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/SearchDocument'
      example: { "total": 2,
                 "start": 10,
                 "maxScore": null,
                 "documents": [ { "fid": "fid1","geometry": "POINT(1 2)","displayValues": [ "value 1","value 2" ] } ] }

    SearchDocument:
      description: 'A search result document'
      type: object
      properties:
        fid:
          description: 'The unique identifier of the feature, also the primary key in the underlying data source'
          type: string
          nullable: false
        geometry:
          description: 'The geometry of the feature (WKT)'
          type: string
          nullable: true
        displayValues:
          description: 'The values from the index to display in the search result'
          type: array
          nullable: true
          items:
            type: string
      example: { "fid": "fid1",
                 "geometry": "POINT(1 2)",
                 "displayValues": [ "value 1", "value 2" ] }

    PageResponse:
      $ref: './viewer-schemas.yaml#/components/schemas/Page'

paths:
  /unauthorized:
    get:
      operationId: 'unauthorized'
      summary: 'Redirect target for API''s which require authentication.'
      security: []
      responses:
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /login:
    post:
      operationId: 'login'
      summary: 'Logs in and returns the authentication cookie'
      security: [ ]
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/x-www-form-urlencoded:
            schema:
              title: 'login'
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: '
            Successfully authenticated. The session ID is returned in a cookie named `JSESSIONID`. 
            You need to include this cookie in subsequent requests.
            '
          headers:
            Set-Cookie:
              schema:
                type: string
                # TODO need to set 'SameSite' and 'Secure'
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '403':
          description: 'Authentication failed'
  /login/configuration:
    get:
      operationId: getLoginConfiguration
      summary: 'Request the login screen configuration.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginConfiguration'

  /user:
    summary: 'get user information, such as login'
    get:
      operationId: 'user'
      summary: 'Gets login information'
      security: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'

  /config/{key}:
    summary: 'get global config value by key'
    get:
      operationId: 'getConfig'
      summary: 'Gets global config value by key'
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
      security: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '404':
          description: 'Configuration key not found'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'

  /app:
    get:
      operationId: getDefaultApp
      summary: 'Get information about the default app'
      security:
        - formAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewerResponse'
        401:
          description: Authentication required
        403:
          description: Access denied
        404:
          description: Not Found

  /{viewerKind}/{name}:
    get:
      operationId: getViewer
      summary: 'Get information about a viewer'
      security:
        - formAuth: []
      parameters:
        - in: path
          name: viewerKind
          required: true
          schema:
            type: string
            enum:
              - app
              - service
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewerResponse'
        401:
          description: Authentication required
        403:
          description: Access denied
        404:
          description: Not Found

  /{viewerKind}/{name}/map:
    get:
      operationId: getMap
      summary: 'Get viewer map'
      security:
        - formAuth: []
      parameters:
        - in: path
          name: viewerKind
          required: true
          schema:
            type: string
            enum:
              - app
              - service
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: base
          schema:
            type: string
          description: '[TODO] Base viewer. Must be in the baseApps list or empty for the default.
            ''none'' is the special value for no base app. If the baseApp is not in the list, the
            default base app is used (returned in response).'
        - in: query
          name: projection
          schema:
            type: string
          description: '[TODO] Projection. Must be in the projections list or empty for the default. If the
            projection is not in the list, the default projection is used (returned in response).'
        - in: query
          name: lang
          schema:
            type: string
          description: '[TODO] Language. Same as for base, projection, etc.'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapResponse'
        401:
          description: Authentication required
        403:
          description: Access denied
        404:
          description: Not Found

  /{viewerKind}/{name}/layer/{appLayerId}/describe:
    description: 'Returns metadata and feature type of the requested layer'
    get:
      operationId: 'describeLayer'
      description: 'provides layer details'
      security:
        - formAuth: [ ]
      parameters:
        - in: path
          name: viewerKind
          required: true
          schema:
            type: string
            enum:
              - app
              - service
        - description: 'viewer name'
          in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: appLayerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './viewer-schemas.yaml#/components/schemas/LayerDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'

  /{viewerKind}/{name}/layer/{appLayerId}/export/capabilities:
    description: Returns layer export capabilities. Retrieving this information may take some time.
    get:
      operationId: 'getLayerExportCapabilities'
      security:
        - formAuth: [ ]
      parameters:
        - in: path
          name: viewerKind
          required: true
          schema:
            type: string
            enum:
              - app
              - service
        - description: 'viewer name'
          in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: appLayerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './viewer-schemas.yaml#/components/schemas/LayerExportCapabilities'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'

  /{viewerKind}/{name}/layer/{appLayerId}/export/download:
    description: Directly stream layer data export response for download. POST request to allow a large filter in the
      request body.
    post:
      operationId: 'downloadLayerExport'
      security:
        - formAuth: [ ]
      parameters:
        - in: path
          name: viewerKind
          required: true
          schema:
            type: string
            enum:
              - app
              - service
        - description: 'viewer name'
          in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: appLayerId
          required: true
          schema:
            type: string
        - name: outputFormat
          description: Output format from capabilities.
          in: query
          schema:
            type: string
        - name: attributes
          description: 'Attributes to include in export. If omitted all configured attributes are exported. For some
            geo formats the geometry is included even if unchecked for display by the admin. For textual or spreadsheet 
            formats geometries are not included. Attribute item order is significant.'
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: filter
          description: 'ECQL filter. See description for /app/{appId}/layer/{layerId}/features.'
          required: false
          schema:
            type: string
        - description: 'Attribute to sort by. See description for  /app/{appId}/layer/{layerId}/features.'
          in: query
          name: sortBy
          required: false
          schema:
            type: string
        - description: 'Sort order for sortBy.'
          in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - description: 'Projection for geometry output.'
          in: query
          name: crs
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'

  /{viewerKind}/{name}/layer/{appLayerId}/features:
    summary: 'Use this endpoint to access features.'
    parameters:
      - in: path
        name: viewerKind
        required: true
        schema:
          type: string
          enum:
            - app
            - service
      - description: 'viewer name'
        in: path
        name: name
        required: true
        schema:
          type: string
      - in: path
        name: appLayerId
        required: true
        schema:
          type: string
      - description: 'x-coordinate, assumed in the coordinate reference system of the attribute source'
        in: query
        name: x
        required: false
        schema:
          type: number
      - description: 'y-coordinate, assumed in the coordinate reference system of the attribute source'
        in: query
        name: y
        required: false
        schema:
          type: number
      - description: 'buffer radius in the coordinate reference system of the attribute source'
        in: query
        name: distance
        required: false
        schema:
          type: number
          default: 4
      - description: 'feature id, the unique and immutable identifier of a feature within an attribute source'
        in: query
        name: __fid
        required: false
        schema:
          type: string
      - description: 'request true to have simplified geometries returned'
        in: query
        name: simplify
        required: false
        schema:
          type: boolean
          default: false
      - description: '
          A filter to be applied, possibly in combination with any other request parameters. 
          The filter is an ECQL string, see [ECQL reference](https://docs.geoserver.org/latest/en/user/filter/ecql_reference.html).
          Filtering is supported when requesting a page of features, not when requesting a single 
          feature (using `__fid`) nor when using x/y coordinates.
          '
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: '
          Page number to retrieve. For the initial request this should be 1 which will 
          then give the pageSize and total of features so additional pages can be retrieved.'
        in: query
        name: page
        required: false
        schema:
          type: integer
          minimum: 1
      - description: '
          The attribute name (not alias) to sort by. 
          The name must be of a configured attribute and not a geometry type.
          The default is to sort by the primary key of the feature.'
        in: query
        name: sortBy
        required: false
        schema:
          type: string
      - description: 'Sort order for sortBy'
        in: query
        name: sortOrder
        required: false
        schema:
          type: string
          default: asc
          enum:
            - asc
            - desc
      - description: Return only geometries, no attributes
        in: query
        name: onlyGeometries
        required: false
        schema:
          type: boolean
          default: false
      - description: Geometry output as part of the attributes, will be ignored if onlyGeometries is true
        in: query
        name: geometryInAttributes
        required: false
        schema:
          type: boolean
          default: false
    get:
      operationId: 'getFeatures'
      description: 'retrieve features that fulfill the requested conditions (parameters).'
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
    post:
      operationId: 'getFeaturesPOST'
      description: The same as GET, but allows for a large (spatial) filter.
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'

  /{viewerKind}/{name}/layer/{appLayerId}/unique/{attributeName}:
    summary: 'Use this endpoint to get a list of unique value of a layer''s feature type attribute.'
    parameters:
      - in: path
        name: viewerKind
        required: true
        schema:
          type: string
          enum:
            - app
            - service
      - description: 'viewer name'
        in: path
        name: name
        required: true
        schema:
          type: string
      - in: path
        name: appLayerId
        required: true
        schema:
          type: string
      - description: 'attribute name'
        in: path
        name: attributeName
        required: true
        schema:
          type: string
      - name: filter
        description: '
        A filter that was already applied to the layer (on a different attribute or this attribute). 
        The filter is an ECQL string, see [ECQL reference](https://docs.geoserver.org/latest/en/user/filter/ecql_reference.html).
        '
        in: query
        schema:
          type: string
        required: false
    get:
      operationId: 'getUniqueValues'
      description: 'retrieve features that fulfill the requested conditions (parameters).'
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniqueValuesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
    post:
      operationId: 'getUniqueValuesPOST'
      description: POST variant for filters too large for a query parameter.
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniqueValuesResponse'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'

  /{viewerKind}/{name}/layer/{appLayerId}/proxy/{protocol}:
    parameters:
      - in: path
        name: viewerKind
        required: true
        schema:
          type: string
          enum:
            - app
            - service
      - description: 'viewer name'
        in: path
        name: name
        required: true
        schema:
          type: string
      - in: path
        name: appLayerId
        required: true
        schema:
          type: string
      - description: 'proxy protocol, must equal ''wmts'' or ''wms'''
        in: path
        name: protocol
        required: true
        schema:
          type: string
      - description: 'Must equal WMS or WMTS'
        in: query
        name: SERVICE
        required: true
        schema:
          type: string
      - name: REQUEST
        description: 'A valid WMS/WMTS request value.'
        in: query
        schema:
          type: string
        required: true
      - name: VERSION
        description: 'WMS/WMTS version.'
        in: query
        schema:
          type: string
        required: false
      - name: free-form
        description: Additional OGC and vendor-specific parameters.
        in: query
        schema:
          type: object
          additionalProperties: true
        style: form
        explode: true
        example:
          LAYER: mylayer
          BBOX: 1,2,3,4
    get:
      operationId: 'proxy'
      description: 'Proxy a WMS/WMTS request to a map service. Useful for accessing a map service requiring authentication
         without exposing the password to the frontend. Authentication is checked by Tailormap. Additional parameters 
         from the WMS spec may be specified which will be passed on to the original server.'
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '403':
          description: 'Forbidden. Proxy not enabled for service or the proxy has credentials but the app is public.'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 'Not Found. Application or application layer does not exist or protocol is unknown.'
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: 'Internal server error'
          content:
            text/plain:
              schema:
                type: string
        '504':
          description: 'Bad Gateway. Proxied service not reachable or responding.'
          content:
            text/plain:
              schema:
                type: string
    post:
      operationId: 'proxyPOST'
      security:
        - formAuth: [ ]
      description: 'The same as GET, but allows for a large request (for example with a large filter parameter) with
       (some) parameters in the body instead of the URL. The request is passed on to the original service as a GET 
       request. An XSRF token is required.'
      requestBody:
        description: Supply large parameters here to avoid extreme URL lengths.
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              description: OGC and vendor-specific parameters too large for the URL.
              type: object
              additionalProperties: true
              example:
                CQL_FILTER: INTERSECTS(geom, BUFFER(POINT(1 2), 10))
                SLD_BODY: ...
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '403':
          description: 'Forbidden. Proxy not enabled for service or the proxy has credentials but the app is public.'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 'Not Found. Application or application layer does not exist or protocol is unknown.'
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: 'Internal server error'
          content:
            text/plain:
              schema:
                type: string
        '504':
          description: 'Bad Gateway. Proxied service not reachable or responding.'
          content:
            text/plain:
              schema:
                type: string


  /{viewerKind}/{name}/layer/{appLayerId}/edit/feature/{fid}:
    summary: 'Edit operations on a single feature.'
    description: 'Operations on a single feature referenced by its FID. The FID is a unique identifier for a feature within a layer.
      It is assigned by the datasource (using the primary key) and is stable between requests. The FID is required for PATCH and
      DELETE requests, and should generally be omitted for POST requests as the datasource will assign the primary key.
      Any geometry attributes are expected to be given in the application CRS; the API will handle projection to the datasource CRS.'
    parameters:
      - in: path
        name: viewerKind
        required: true
        schema:
          type: string
          enum:
            - app
            - service
      - in: path
        name: name
        required: true
        schema:
          type: string
      - in: path
        name: appLayerId
        required: true
        schema:
          type: string
      - in: path
        description: '
        The Feature ID. This *must* be given for PATCH and DELETE requests and
         in general *should* be omitted for POST requests as the underlying datasource will assign it (YMMV).'
        name: fid
        required: false
        schema:
          type: string
    post:
      operationId: 'createFeature'
      description: 'Create a new feature. The fid parameter can be omitted.'
      security:
        - formAuth: [ ]
      requestBody:
        description: 'The feature to create.'
        required: true
        content:
          application/json:
            schema:
              $ref: './viewer-schemas.yaml#/components/schemas/Feature'
      responses:
        201:
          description: 'The created feature is returned.'
          content:
            application/json:
              schema:
                $ref: './viewer-schemas.yaml#/components/schemas/Feature'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters or content that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
    patch:
      operationId: 'updateFeature'
      description: 'Update an existing feature with only the given fields. The FID must be given, the payload only has updated fields.'
      security:
        - formAuth: [ ]
      requestBody:
        description: 'The feature to update. This feature can be "incomplete", only the given fields will be updated.'
        required: true
        content:
          application/json:
            schema:
              $ref: './viewer-schemas.yaml#/components/schemas/Feature'
      responses:
        200:
          description: 'Feature patched.'
          content:
            application/json:
              schema:
                $ref: './viewer-schemas.yaml#/components/schemas/Feature'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
    delete:
      operationId: 'deleteFeature'
      description: 'Delete an existing feature. The FID *must* be given.'
      security:
        - formAuth: [ ]
      responses:
        204:
          description: 'Feature deleted.'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'


  /{viewerKind}/{viewerName}/layer/{appLayerId}/search:
    summary: 'Use this endpoint to search for features using external indexes (eg. Solr).'
    parameters:
      - in: path
        name: viewerKind
        required: true
        schema:
          type: string
          enum:
            - app
            - service
      - description: 'viewer name'
        in: path
        name: viewerName
        required: true
        schema:
          type: string
      - in: path
        name: appLayerId
        required: true
        schema:
          type: string
      - description: '(Solr) search term'
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: 'start index for the search results, default is 0. Use this to paginate the results.'
        in: query
        name: start
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: '(Solr) distance search term (kilometers)'
        in: query
        name: d
        required: true
        schema:
          type: number
          format: double
      - description: '(Solr) search point term'
        in: query
        name: pt
        required: false
        schema:
          type: string
      - description: '(Solr) filter query term'
        in: query
        name: fq
        required: false
        schema:
          type: string
    get:
      operationId: 'search'
      description: 'retrieve a limited list of search responses that fulfill the requested conditions (parameters).'
      security:
        - formAuth: [ ]
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '204':
          description: 'No content. The search did not return any results. This could be because the search term was too specific and no results were found or there is no search index.'
        '400':
          description: 'Bad Request. May be returned for some combination of parameters that can not be processed or are incomplete.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
        '500':
          description: 'Internal server error. Something went wrong while processing the search request, maybe search index is down.'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/ErrorResponse'

  /page:
    summary: 'Use this endpoint to get the home page'
    get:
      operationId: 'getHomePage'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'

  /page/{name}:
    summary: 'Use this endpoint to get a page'
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
    get:
      operationId: 'getPage'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: './status-responses.yaml#/components/schemas/RedirectResponse'
